{"version":3,"sources":["models/ProductModel.ts","components/ProductList/index.tsx","models/BaseModel.ts","actions/modelActions.ts"],"names":["ProductModel","props","BaseModel","resource","ProductListImpl","Axios","get","headers","useQueryString","data","results","forEach","element","id","code","$save","className","Row","this","productList","map","product","index","Col","xs","md","sm","title","onClick","isFavorite","aria-hidden","images","img","i","alt","name","src","url","price","currencyIso","value","React","mapStateToProps","state","list","ProductList","connect","getStoreKey","constructor","identifier","instance","_id","dispacthAction","type","SAVE_INSTANCE","instances","instanceObject","R","x","SAVE_ALL_INSTANCE","store","getState","model","filter","toJS","key","DELETE_INSTANCE"],"mappings":"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","file":"static/js/7.8ecad80d.chunk.js","sourcesContent":["import { BaseModel } from \"./BaseModel\";\ninterface IProductModelProps {\n  name: string;\n  images: {\n    url: string;\n  }[];\n  price: {\n    currencyIso: string;\n    value: string;\n  };\n  isFavorite: boolean;\n}\n\nexport class ProductModel extends BaseModel<IProductModelProps> {\n  constructor(props: any) {\n    super(props);\n    this.props = props;\n  }\n  static resource = \"product\";\n}\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport Axios from \"axios\";\nimport { ProductModel } from \"../../models/ProductModel\";\nimport { Col, Row } from \"reactstrap\";\nimport \"./productList.scss\";\nexport interface IProductListProps {\n  productList: ProductModel[];\n}\n\nexport class ProductListImpl extends React.PureComponent<\n  IProductListProps,\n  {}\n> {\n  async componentDidMount() {\n    const response = await Axios.get(\n      \"https://apidojo-hm-hennes-mauritz-v1.p.rapidapi.com/products/list?categories=men_all&sortBy=stock&concepts=H%2526M%20MAN&country=us&lang=en&currentpage=0&pagesize=30\",\n      {\n        headers: {\n          \"x-rapidapi-host\": \"apidojo-hm-hennes-mauritz-v1.p.rapidapi.com\",\n          \"x-rapidapi-key\":\n            \"516a5ecdcemsh2b5192fad8db3b0p12badbjsn10762fa93820\",\n          useQueryString: true,\n        },\n      }\n    );\n    response.data.results.forEach((element: any) => {\n      element.id = element.code;\n      new ProductModel(element).$save();\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"ProductListPageContainer M-Full-Width\">\n        <div className=\"Filters\">\n          <h1>Filters</h1>\n        </div>\n        <Row className=\"ProductListPage\">\n          {this.props.productList.map((product, index) => {\n            return (\n              <Col xs={12} md={3} sm={3} className=\"Product\">\n                <div className=\"Image\">\n                  <i\n                    title=\"Click to add into Favorites\"\n                    onClick={() => {\n                      if (!product.props.isFavorite) {\n                        product.props.isFavorite = true;\n                      } else {\n                        product.props.isFavorite = false;\n                      }\n                      new ProductModel(product.props).$save();\n                    }}\n                    className={`fa ${\n                      product.props.isFavorite ? \"fa-heart\" : \"fa-heart-o\"\n                    }`}\n                    aria-hidden=\"true\"\n                  ></i>\n                  {product.props.images.map((img, i) => (\n                    <img\n                      className=\"ProductImage\"\n                      alt={product.props.name}\n                      src={img.url}\n                    />\n                  ))}{\" \"}\n                  <div className=\"QuickView\">Quick View</div>\n                </div>\n                <div className=\"ProductConfig\">\n                  <div className=\"ProductName\">{product.props.name}</div>\n                  <div className=\"ProductPrice\">\n                    {product.props.price.currencyIso}\n                    &nbsp;\n                    {product.props.price.value}\n                  </div>\n                </div>\n              </Col>\n            );\n          })}\n        </Row>\n      </div>\n    );\n  }\n}\nexport function mapStateToProps(state: any) {\n  return {\n    productList: ProductModel.list(state),\n  };\n}\nexport const ProductList = connect<{}, {}, IProductListProps>(mapStateToProps)(\n  ProductListImpl\n);\n","import * as R from \"ramda\";\nimport {\n  saveAllInstances,\n  saveInstance,\n  deleteInstance\n} from \"../actions/modelActions\";\nimport { store } from \"../store/index\";\n\n/**\n * This is the Base Class for all the models which will be created for each resources.\n * Consist of the Utility methods which Saves/Updates/Deletes the data from the Store.\n * The Derived class need to pass a Generic Class <P> i.e. prop types for the Model being Created.\n * @export\n * @class BaseModel\n * @template P\n */\nexport class BaseModel<P> {\n  static resource: string;\n  resource: string;\n  id: string;\n\n  constructor(public props: P & { id: string; _id: string }) {\n    this.props = props;\n    this.id = props.id;\n    this.resource = (this.constructor as typeof BaseModel).resource;\n  }\n\n  /**\n   * Returns the key i.e. the concatination of the ID of current instance with the resource name.\n   * @memberof BaseModel\n   */\n  getStoreKey = (id: string): string => `${this.resource}${id}`;\n\n  /**\n   * Returns the key i.e. the concatination of the ID of current instance with the resource name.\n   * It is static so that the static method inside this class should have access to the same.\n   * @static\n   * @memberof BaseModel\n   */\n  static getStoreKey = (id: string, instance: any): string =>\n    `${instance.resource}${id}`;\n\n  /**\n   * Saves an instance of the current class to the Store, the key is the resourceName+ID of the data.\n   * Accepts both @props id and _id(Support for MONGO)\n   * @returns {BaseModel<P>}\n   * @memberof BaseModel\n   */\n  $save(): BaseModel<P> {\n    saveInstance(\n      this.resource,\n      this.getStoreKey(this.props.id || this.props._id),\n      this\n    );\n    return this;\n  }\n\n  /**\n   * Saves an array of instances to the Store, the instance map is getting created over here and is being saved to the store.\n   * @returns {BaseModel<P>[]}\n   * @memberof BaseModel\n   */\n  $saveAll(): BaseModel<P>[] {\n    let instanceObject: any = {};\n    R.map(x => {\n      return (instanceObject[this.getStoreKey(x.id)] = {\n        props: x,\n        resource: this.resource\n      });\n    }, this.props as any);\n    saveAllInstances(this.resource, instanceObject);\n    return [this];\n  }\n\n  /**\n   * Returns the instance which matches the ID passed in the parameter of this function.\n   * The return value contains props.\n   * @static\n   * @param {string} id\n   * @param {*} [state=store.getState()]\n   * @returns\n   * @memberof BaseModel\n   */\n  static get(id: string, state = store.getState()) {\n    return state.model.get(this.getStoreKey(id, this));\n  }\n\n  /**\n   * Returns the list of all the instances of the current class.\n   * It uses resource name to match the instance to the current instance and then returns the filtered value.\n   * @static\n   * @param {*} [state=store.getState()]\n   * @returns\n   * @memberof BaseModel\n   */\n  static list(state = store.getState()) {\n    return R.values(\n      state.model\n        .filter((x: { resource: string; props: any }) =>\n          x.resource === this.resource ? x.props : \"\"\n        )\n        .toJS()\n    );\n  }\n\n  /**\n   * Deletes an instances matching the ID passed in the parameter.\n   * @static\n   * @param {BaseModel<any>} instance\n   * @returns\n   * @memberof BaseModel\n   */\n  static delete(instance: BaseModel<any>) {\n    deleteInstance(\n      this.getStoreKey(instance.props.id || instance.props._id, instance)\n    );\n    return this;\n  }\n}\n","import { dispacthAction } from \"../generalUtils\";\nimport {\n  SAVE_INSTANCE,\n  DELETE_INSTANCE,\n  DELETE_ALL_INSTANCE,\n  SAVE_ALL_INSTANCE\n} from \"../constants/actionTypes\";\nimport { BaseModel } from \"../models/BaseModel\";\n\n/**\n * Usage: To save the instance to the Store, called in the BaseModel.\n * @param {string} identifier\n * @param {string} id\n * @param {BaseModel<{}>} instance\n */\nexport const saveInstance = (\n  identifier: string,\n  id: string,\n  instance: BaseModel<{}>\n) =>\n  dispacthAction({\n    type: `${identifier}/${SAVE_INSTANCE}`,\n    id,\n    instance\n  });\n\n/**\n * Usage: Saves all the instances to the store, accepts the instance map and merges it into the Store state.\n * @param {string} identifier\n * @param {BaseModel<{}>[]} instances\n */\nexport const saveAllInstances = (\n  identifier: string,\n  instances: BaseModel<{}>[]\n) =>\n  dispacthAction({\n    type: `${identifier}/${SAVE_ALL_INSTANCE}`,\n    instances\n  });\n\n/**\n * Usage: Deletes an instance of the BaseModel from the Store.\n * @param {string} key\n */\nexport const deleteInstance = (key: string) =>\n  dispacthAction({\n    type: DELETE_INSTANCE,\n    key\n  });\n\n/**\n * Usage: To delete all the instances from the store.\n * @param {string[]} keys\n */\nexport const deleteAllInstance = (keys: string[]) =>\n  dispacthAction({\n    type: DELETE_ALL_INSTANCE,\n    keys\n  });\n"],"sourceRoot":""}