{"version":3,"sources":["reducers/index.ts","reducers/modelReducer.ts","store/index.ts","generalUtils.ts","components/Navbar/fabLogo.png","components/Navbar/index.tsx","components/BasePage/Footer.tsx","components/BasePage/index.tsx","Routes.tsx","App.tsx","serviceWorker.ts","index.tsx","constants/actionTypes.ts"],"names":["rootReducer","combineReducers","model","state","OrderedMap","action","type","instances","instance","id","modelId","split","SAVE_INSTANCE","set","SAVE_ALL_INSTANCE","merge","UPDATE_INSTANCE","DELETE_INSTANCE","delete","DELETE_ALL_INSTANCE","deleteAll","store","createStore","devToolsEnhancer","name","dispacthAction","dispatch","isMobile","navigator","appVersion","toString","toLowerCase","includes","module","exports","treeData","key","label","nodes","Navbar","useState","isOpen","setIsOpen","activeItem","setActiveItem","console","log","color","light","fixed","expand","NavbarBrand","href","width","src","Logo","alt","NavbarToggler","onClick","className","Collapse","navbar","Nav","NavItem","placeholder","aria-hidden","data","hasSearch","NavbarText","navConfig","items","map","itemData","index","onMouseEnter","repositoryId","displayName","onMouseLeave","Footer","BasePageImpl","this","props","children","React","BasePage","connect","Home","lazy","then","default","SideCarousel","ProductList","WrappedComponent","Component","Routes","HashRouter","Suspense","fallback","Switch","Fragment","Route","exact","path","component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.20e3e38c.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\nimport { modelReducer } from './modelReducer';\n\nexport const rootReducer = combineReducers({\n    model: modelReducer\n})","import { OrderedMap } from \"immutable\";\nimport {\n  DELETE_ALL_INSTANCE,\n  DELETE_INSTANCE,\n  SAVE_ALL_INSTANCE,\n  SAVE_INSTANCE,\n  UPDATE_INSTANCE\n} from \"../constants/actionTypes\";\nimport { IActionType } from \"../interfaces\";\n\n/**\n * Usage: This the logic container to save the BaseModel instance to the store.\n * @param {*} [state=OrderedMap({})]\n * @param {IActionType} action\n * @returns\n */\nexport const modelReducer = (state = OrderedMap({}), action: IActionType) => {\n  const { type, instances, instance, id } = action;\n  const modelId = id as string;\n  switch (type.split(\"/\")[1]) {\n    case SAVE_INSTANCE:\n      return state.set(modelId, instance);\n    case SAVE_ALL_INSTANCE:\n      return state.merge(instances);\n    case UPDATE_INSTANCE:\n      return state.set(modelId, instance);\n    case DELETE_INSTANCE:\n      return state.delete(modelId);\n    case DELETE_ALL_INSTANCE:\n      return state.deleteAll(modelId);\n    default:\n      return state;\n  }\n};\n","import { createStore, Store } from \"redux\";\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport { IReduxStore } from '../interfaces';\nimport { rootReducer } from '../reducers/index';\n\nfunction configureStore(): Store<IReduxStore> {\n    return createStore(rootReducer, devToolsEnhancer({ name: 'ReactORM' }));\n}\n\nexport const store = configureStore()","import { IActionType } from \"./interfaces\";\nimport { store } from \"./store/index\";\n\nexport function dispacthAction<T extends IActionType>(action: T) {\n  if (action as IActionType) {\n    store.dispatch(action);\n  }\n  return store.dispatch<{ type: string }>(action);\n}\n\nexport const isMobile = () =>\n  navigator.appVersion.toString().toLowerCase().includes(\"iphone\") ||\n  navigator.appVersion.toString().toLowerCase().includes(\"android\");\n","module.exports = __webpack_public_path__ + \"static/media/fabLogo.cfcdb977.png\";","import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Nav,\n  Navbar as RNav,\n  NavbarBrand,\n  NavbarText,\n  NavbarToggler,\n  NavItem,\n} from \"reactstrap\";\nimport Logo from \"./fabLogo.png\";\nimport { map } from \"ramda\";\nimport \"./navbar.scss\";\nimport navConfig from \"./config.json\";\nimport { isMobile } from \"../../generalUtils\";\nimport TreeMenu from \"react-simple-tree-menu\";\n// as an array\nconst treeData = [\n  {\n    key: \"first-level-node-1\",\n    label: \"Node 1 at the first level\",\n    nodes: [\n      {\n        key: \"second-level-node-1\",\n        label: \"Node 1 at the second level\",\n        nodes: [\n          {\n            key: \"third-level-node-1\",\n            label: \"Last node of the branch\",\n            nodes: [], // you can remove the nodes property or leave it as an empty array\n          },\n        ],\n      },\n    ],\n  },\n  {\n    key: \"first-level-node-2\",\n    label: \"Node 2 at the first level\",\n  },\n];\nexport const Navbar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeItem, setActiveItem] = useState(\"\");\n\n  const toggle = () => setIsOpen(!isOpen);\n  console.log(\">> activeItem\", activeItem);\n  return (\n    <RNav color=\"light\" light fixed=\"top\" expand=\"md\">\n      <NavbarBrand href=\"/\">\n        <img width=\"120px\" src={Logo} alt=\"Logo\" />\n      </NavbarBrand>\n      <NavbarToggler onClick={toggle} />\n      <div className=\"MyNavContainer\">\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <div className=\"SearchInp\">\n                {\" \"}\n                <input\n                  className=\"SearchInput\"\n                  placeholder=\"Enter your search text here...\"\n                />\n                <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\n              </div>\n            </NavItem>\n            {isMobile() && (\n              <div className=\"TreeNode\">\n                <TreeMenu data={treeData} hasSearch={false} />\n              </div>\n            )}\n          </Nav>\n          <NavbarText>\n            Sign In | Sign Up | Track Your Order | Store Locator\n          </NavbarText>\n        </Collapse>\n        {!isMobile() && (\n          <div className=\"MenuItemContainer\">\n            {navConfig.items.map((itemData, index) => {\n              return (\n                <>\n                  <div\n                    onMouseEnter={() => setActiveItem(itemData.repositoryId)}\n                    className=\"NavItem\"\n                    key={index}\n                  >\n                    {itemData.displayName}\n                    <i className=\"fa fa-chevron-down\"></i>\n                    {activeItem === itemData.repositoryId && (\n                      <div\n                        onMouseLeave={() => setActiveItem(\"\")}\n                        className=\"HoverElement\"\n                      >\n                        <h1>Items Goes Here for {itemData.displayName}</h1>\n                      </div>\n                    )}\n                  </div>\n                </>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </RNav>\n  );\n};\n","import * as React from 'react';\n\nexport const Footer = () => { \n    return <h1>Footer</h1>\n}","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Navbar } from \"../Navbar\";\nimport { Footer } from \"./Footer\";\n\nexport interface IBasePageProps {}\n\nexport class BasePageImpl extends React.PureComponent<IBasePageProps, {}> {\n  render() {\n    return (\n      <div className=\"BasePage\">\n        <Navbar />\n        {this.props.children}\n        <Footer />\n      </div>\n    );\n  }\n}\nexport function mapStateToProps() {\n  return {};\n}\nexport const BasePage = connect<{}, {}, IBasePageProps>(mapStateToProps)(\n  BasePageImpl\n);\n","import { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\nimport React from \"react\";\nimport { BasePage } from \"./components/BasePage\";\n\n// const Home = asyncComponent(() => {\n//   return import('./components/Home');\n// });\n\nconst Home = React.lazy(() =>\n  import(\"./components/Home\").then(({ Home }) => ({\n    default: Home,\n  }))\n);\nconst SideCarousel = React.lazy(() =>\n  import(\"./components/docs\").then(({ SideCarousel }) => ({\n    default: SideCarousel,\n  }))\n);\nconst ProductList = React.lazy(() =>\n  import(\"./components/ProductList\").then(({ ProductList }) => ({\n    default: ProductList,\n  }))\n);\n\nconst WrappedComponent = (Component: any) => {\n  return class Wrapper extends React.Component {\n    render() {\n      return (\n        <BasePage>\n          <Component />\n        </BasePage>\n      );\n    }\n  };\n};\n\n// const NotFound = () => <h1>404 Not Found</h1>;\n\nexport const Routes = () => {\n  return (\n    <HashRouter>\n      <React.Suspense fallback={<h1>Loding...</h1>}>\n        <Switch>\n          <React.Fragment>\n            <Route exact path=\"/\" component={WrappedComponent(Home)} />\n            <Route\n              exact\n              path=\"/lib/docs\"\n              component={WrappedComponent(SideCarousel)}\n            />\n            <Route\n              exact\n              path=\"/product-list\"\n              component={WrappedComponent(ProductList)}\n            />\n          </React.Fragment>\n        </Switch>\n      </React.Suspense>\n    </HashRouter>\n  );\n};\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/index\";\nimport { Routes } from \"./Routes\";\nimport \"antd/dist/antd.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport \"./main.scss\";\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","export const SAVE_INSTANCE = 'SAVE_INSTANCE';\nexport const SAVE_ALL_INSTANCE = 'SAVE_ALL_INSTANCE';\nexport const UPDATE_INSTANCE = 'UPDATE_INSTANCE';\nexport const DELETE_INSTANCE = 'DELETE_INSTANCE';\nexport const DELETE_ALL_INSTANCE = 'DELETE_ALL_INSTANCE';\n"],"sourceRoot":""}