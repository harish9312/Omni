{"version":3,"sources":["constants/actionTypes.ts","components/CurrencySwitch/index.tsx","components/Navbar/index.tsx","components/BasePage/index.tsx","components/ProductDetails/index.tsx","Routes.tsx","App.tsx","serviceWorker.ts","index.tsx","reducers/index.ts","reducers/modelReducer.ts","store/index.ts","generalUtils.ts","models/ProductModel.ts","models/BaseModel.ts","actions/modelActions.ts","components/Navbar/fabLogo.png"],"names":["SAVE_INSTANCE","SAVE_ALL_INSTANCE","UPDATE_INSTANCE","DELETE_INSTANCE","DELETE_ALL_INSTANCE","CurrencySwitch","React","isOpen","setOpen","className","name","activeFlag","setActiveFlag","value","data-country","data-currency-symbol","data-display","onClick","tabIndex","id","data-value","treeData","key","label","nodes","Navbar","useState","setIsOpen","isOpenBurger","setIsOpenBurger","color","light","fixed","expand","NavbarBrand","aria-hidden","width","src","Logo","alt","NavbarToggler","Collapse","navbar","Nav","NavItem","placeholder","data","hasSearch","BasePageImpl","this","props","children","BasePage","connect","ProductDetailsImpl","state","productDetails","code","sizeScaleProductType","whitePrice","price","images","url","description","match","params","productData","ProductModel","get","history","push","productCode","split","Axios","headers","useQueryString","response","setState","product","console","log","Row","Col","xs","md","lg","ProductDetails","withRouter","ownProps","Home","lazy","then","default","SideCarousel","ProductList","WrappedComponent","Component","Routes","HashRouter","Suspense","fallback","Switch","Fragment","Route","exact","path","component","App","store","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","rootReducer","combineReducers","model","OrderedMap","action","type","instances","instance","modelId","set","merge","delete","deleteAll","createStore","devToolsEnhancer","dispacthAction","dispatch","isMobile","appVersion","toString","toLowerCase","includes","isIPad","BaseModel","resource","getStoreKey","constructor","identifier","_id","instanceObject","R","x","getState","filter","toJS","module","exports"],"mappings":"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","file":"static/js/main.46462a8b.chunk.js","sourcesContent":["export const SAVE_INSTANCE = 'SAVE_INSTANCE';\nexport const SAVE_ALL_INSTANCE = 'SAVE_ALL_INSTANCE';\nexport const UPDATE_INSTANCE = 'UPDATE_INSTANCE';\nexport const DELETE_INSTANCE = 'DELETE_INSTANCE';\nexport const DELETE_ALL_INSTANCE = 'DELETE_ALL_INSTANCE';\n","import * as React from \"react\";\nimport \"./currencySwitch.scss\";\nexport const CurrencySwitch = () => {\n  const [isOpen, setOpen] = React.useState(false);\n  const [activeFlag, setActiveFlag] = React.useState({\n    className: \"flags-India\",\n    name: \"INR\",\n  });\n  return (\n    <div className=\"doubly-wrapper\">\n      <select className=\"currency-switcher right\" name=\"doubly-currencies\">\n        <option\n          value=\"INR\"\n          data-country=\"India\"\n          data-currency-symbol=\"₹\"\n          data-display=\"INR\"\n        >\n          Indian Rupee\n        </option>\n        <option\n          value=\"USD\"\n          data-country=\"United-States\"\n          data-currency-symbol=\"$\"\n          data-display=\"USD\"\n        >\n          US Dollar\n        </option>\n      </select>\n      <div\n        className={`nice-select currency-switcher right slim ${\n          isOpen && \"open\"\n        }`}\n        onClick={() => setOpen(!isOpen)}\n        tabIndex={0}\n        id=\"switcher\"\n      >\n        <span className=\"current notranslate\">\n          <span className={`flags ${activeFlag.className}`}></span> &nbsp;\n          {activeFlag.name}\n        </span>\n        <ul className=\"list\">\n          <li\n            className=\"option notranslate selected\"\n            data-value=\"INR\"\n            data-country=\"India\"\n            data-currency-symbol=\"₹\"\n            data-display=\"INR\"\n            onClick={() =>\n              setActiveFlag({ className: \"flags-India\", name: \"INR\" })\n            }\n          >\n            <span className=\"flags flags-India\"></span> &nbsp;INR\n          </li>\n          <li\n            className=\"option notranslate \"\n            data-value=\"USD\"\n            data-country=\"United-States\"\n            data-currency-symbol=\"$\"\n            data-display=\"USD\"\n            onClick={() =>\n              setActiveFlag({ className: \"flags-United-States\", name: \"USD\" })\n            }\n          >\n            <span className=\"flags flags-United-States\"></span> &nbsp;USD\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport TreeMenu from \"react-simple-tree-menu\";\nimport {\n  Collapse,\n  Nav,\n  Navbar as RNav,\n  NavbarBrand,\n\n  NavbarToggler,\n  NavItem\n} from \"reactstrap\";\nimport { CurrencySwitch } from \"../CurrencySwitch\";\nimport Logo from \"./fabLogo.png\";\nimport \"./navbar.scss\";\n// as an array\nconst treeData = [\n  {\n    key: \"first-level-node-1\",\n    label: \"Node 1 at the first level\",\n    nodes: [\n      {\n        key: \"second-level-node-1\",\n        label: \"Node 1 at the second level\",\n        nodes: [\n          {\n            key: \"third-level-node-1\",\n            label: \"Last node of the branch\",\n            nodes: [], // you can remove the nodes property or leave it as an empty array\n          },\n        ],\n      },\n    ],\n  },\n  {\n    key: \"first-level-node-2\",\n    label: \"Node 2 at the first level\",\n  },\n];\nexport const Navbar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenBurger, setIsOpenBurger] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n  return (\n    <RNav color=\"light\" light fixed=\"top\" expand=\"md\">\n      <NavbarBrand>\n        <i\n          className=\"fa fa-bars\"\n          aria-hidden=\"true\"\n          onClick={() => setIsOpenBurger(true)}\n        >\n          {\" \"}\n        </i>\n        <img width=\"120px\" src={Logo} alt=\"Logo\" />\n      </NavbarBrand>\n      <div\n        className={`HambburgerSideMenu ${\n          isOpenBurger ? \"HM-open\" : \"HM-close\"\n        }`}\n      >\n        <h1>Close</h1>\n        <i\n          onClick={() => setIsOpenBurger(false)}\n          className=\"fa fa-times\"\n          aria-hidden=\"true\"\n        ></i>\n      </div>\n      <NavbarToggler onClick={toggle} />\n      <div className=\"MyNavContainer\">\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <div className=\"SearchInp\">\n                {\" \"}\n                <input\n                  className=\"SearchInput\"\n                  placeholder=\"Enter your search text here...\"\n                />\n                <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\n              </div>\n            </NavItem>\n            <div className=\"TreeNode hidden-lg\">\n              <TreeMenu data={treeData} hasSearch={false} />\n            </div>\n          </Nav>\n          <CurrencySwitch />\n          {/* <NavbarText>\n            Sign In | Sign Up | Track Your Order | Store Locator\n          </NavbarText> */}\n        </Collapse>\n\n        {/* <div className=\"MenuItemContainer hidden-xs \">\n          {navConfig.items.map((itemData, index) => {\n            return (\n              <>\n                <div\n                  onMouseEnter={() => setActiveItem(itemData.repositoryId)}\n                  className=\"NavItem\"\n                  key={index}\n                >\n                  {itemData.displayName}\n                  <i className=\"fa fa-chevron-down\"></i>\n                  {activeItem === itemData.repositoryId && (\n                    <div\n                      onMouseLeave={() => setActiveItem(\"\")}\n                      className=\"HoverElement\"\n                    >\n                      <h1>Items Goes Here for {itemData.displayName}</h1>\n                    </div>\n                  )}\n                </div>\n              </>\n            );\n          })}\n        </div> */}\n      </div>\n    </RNav>\n  );\n};\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Navbar } from \"../Navbar\";\n\nexport interface IBasePageProps {}\n\nexport class BasePageImpl extends React.PureComponent<IBasePageProps, {}> {\n  render() {\n    return (\n      <div className=\"BasePage\">\n        <Navbar />\n        {this.props.children}\n        {/* <Footer /> */}\n      </div>\n    );\n  }\n}\nexport function mapStateToProps() {\n  return {};\n}\nexport const BasePage = connect<{}, {}, IBasePageProps>(mapStateToProps)(\n  BasePageImpl\n);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport Axios from \"axios\";\nimport { ProductModel } from \"../../models/ProductModel\";\nimport { Row, Col } from \"reactstrap\";\nimport \"./productDetail.scss\";\nimport { IHistory } from \"../../interfaces\";\nexport interface IProductDetailsProps {\n  match: {\n    params: {\n      id: string;\n    };\n  };\n  history: IHistory;\n}\n\nexport class ProductDetailsImpl extends React.PureComponent<\n  IProductDetailsProps,\n  {\n    productDetails: any;\n  }\n> {\n  state = {\n    productDetails: {\n      name: \"\",\n      code: \"\",\n      sizeScaleProductType: \"\",\n      whitePrice: {\n        price: \"\",\n        value: \"\",\n      },\n      images: [{ url: \"\" }],\n      description: \"\",\n    },\n  };\n\n  async componentDidMount() {\n    const id = this.props.match.params.id;\n    const productData = ProductModel.get(id);\n    if (!productData) {\n      this.props.history.push(\"/product-list\");\n      return;\n    }\n\n    const productCode = id.split(\"_\")[0] + id.split(\"_\")[2];\n    const response = await Axios.get(\n      `https://apidojo-hm-hennes-mauritz-v1.p.rapidapi.com/products/detail?country=us&lang=en&productcode=${productCode}`,\n      {\n        headers: {\n          \"x-rapidapi-host\": \"apidojo-hm-hennes-mauritz-v1.p.rapidapi.com\",\n          \"x-rapidapi-key\":\n            \"516a5ecdcemsh2b5192fad8db3b0p12badbjsn10762fa93820\",\n          useQueryString: true,\n        },\n      }\n    );\n    this.setState({\n      productDetails: { ...response.data.product, ...productData?.props },\n    });\n  }\n\n  render() {\n    console.log(\">> this.state.productData\", this.state.productDetails);\n    if (!this.state.productDetails) {\n      return \"\";\n    }\n    const { productDetails } = this.state;\n    return (\n      <div className=\"ProductDetails\">\n        <Row>\n          <Col xs={12} md={12} lg={6}>\n            <div className=\"ProductImage\">\n              <img alt=\"\" src={productDetails.images[0].url} />\n            </div>\n          </Col>\n          <Col xs={12} md={12} lg={6} className=\"Details\">\n            <div className=\"ProductRow ProductName padding-20\">\n              {productDetails.name}\n            </div>\n            <div className=\"ProductRow ProductCode\">\n              Code: &nbsp; {productDetails.code}\n            </div>\n            <div className=\"padding-20\">\n              <div className=\"ProductRow ProductPrice\">\n                $\n                {productDetails.whitePrice.price ||\n                  productDetails.whitePrice.value}\n              </div>\n              <div>\n                {\" \"}\n                <div className=\"Quantity\">\n                  <i className=\"fa qty fa-plus\" />\n                  <span className=\"qty\">10</span>\n                  <i className=\"fa qty fa-minus\" />\n                </div>\n                <div>\n                  <button className=\"add\">ADD TO CART</button>\n                </div>\n              </div>\n            </div>\n            <div className=\"padding-20\">\n              <div className=\"head\">Check Delivery Service Availability</div>\n              <div className=\"detail-data pro-details\">\n                {\" \"}\n                <div>Check Delivery Service Availability</div>\n                <input className=\"input\" placeholder=\"Enter Pincode\" />{\" \"}\n                <button className=\"check\">Check</button>\n              </div>\n            </div>\n            <div className=\"padding-20\">\n              <div className=\"head\">Connect To A Store</div>\n              <div className=\"detail-data pro-details\">\n                <input\n                  className=\"input\"\n                  placeholder=\"Enter a Pincode or Store Name\"\n                />{\" \"}\n                <button className=\"add\">Connect To A Store</button>\n              </div>\n            </div>\n            <div className=\"ProductRow padding-20 ProductDesc\">\n              <div className=\"head\">Details</div>\n              <div className=\"pro-details\">{productDetails.description}</div>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\nexport function mapStateToProps(state: any, ownProps: any) {\n  return {\n    state,\n  };\n}\nexport const ProductDetails = withRouter(\n  connect<{}, {}, IProductDetailsProps>(mapStateToProps)(ProductDetailsImpl)\n);\n","import { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\nimport React from \"react\";\nimport { BasePage } from \"./components/BasePage\";\nimport { ProductDetails } from \"./components/ProductDetails\";\n\nconst Home = React.lazy(() =>\n  import(\"./components/Home\").then(({ Home }) => ({\n    default: Home,\n  }))\n);\nconst SideCarousel = React.lazy(() =>\n  import(\"./components/docs\").then(({ SideCarousel }) => ({\n    default: SideCarousel,\n  }))\n);\nconst ProductList = React.lazy(() =>\n  import(\"./components/ProductList\").then(({ ProductList }) => ({\n    default: ProductList,\n  }))\n);\n\nconst WrappedComponent = (Component: any) => {\n  return class Wrapper extends React.Component {\n    render() {\n      return (\n        <BasePage>\n          <Component />\n        </BasePage>\n      );\n    }\n  };\n};\n\n// const NotFound = () => <h1>404 Not Found</h1>;\n\nexport const Routes = () => {\n  return (\n    <HashRouter>\n      <React.Suspense fallback={<h1>Loading...</h1>}>\n        <Switch>\n          <React.Fragment>\n            <Route exact path=\"/\" component={WrappedComponent(Home)} />\n            <Route\n              exact\n              path=\"/lib/docs\"\n              component={WrappedComponent(SideCarousel)}\n            />\n            <Route\n              exact\n              path=\"/product-list\"\n              component={WrappedComponent(ProductList)}\n            />\n            <Route\n              exact\n              path=\"/product-detail/:id\"\n              component={WrappedComponent(ProductDetails)}\n            />\n          </React.Fragment>\n        </Switch>\n      </React.Suspense>\n    </HashRouter>\n  );\n};\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/index\";\nimport { Routes } from \"./Routes\";\nimport \"antd/dist/antd.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport \"./main.scss\";\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { combineReducers } from \"redux\";\nimport { modelReducer } from './modelReducer';\n\nexport const rootReducer = combineReducers({\n    model: modelReducer\n})","import { OrderedMap } from \"immutable\";\nimport {\n  DELETE_ALL_INSTANCE,\n  DELETE_INSTANCE,\n  SAVE_ALL_INSTANCE,\n  SAVE_INSTANCE,\n  UPDATE_INSTANCE\n} from \"../constants/actionTypes\";\nimport { IActionType } from \"../interfaces\";\n\n/**\n * Usage: This the logic container to save the BaseModel instance to the store.\n * @param {*} [state=OrderedMap({})]\n * @param {IActionType} action\n * @returns\n */\nexport const modelReducer = (state = OrderedMap({}), action: IActionType) => {\n  const { type, instances, instance, id } = action;\n  const modelId = id as string;\n  switch (type.split(\"/\")[1]) {\n    case SAVE_INSTANCE:\n      return state.set(modelId, instance);\n    case SAVE_ALL_INSTANCE:\n      return state.merge(instances);\n    case UPDATE_INSTANCE:\n      return state.set(modelId, instance);\n    case DELETE_INSTANCE:\n      return state.delete(modelId);\n    case DELETE_ALL_INSTANCE:\n      return state.deleteAll(modelId);\n    default:\n      return state;\n  }\n};\n","import { createStore, Store } from \"redux\";\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport { IReduxStore } from '../interfaces';\nimport { rootReducer } from '../reducers/index';\n\nfunction configureStore(): Store<IReduxStore> {\n    return createStore(rootReducer, devToolsEnhancer({ name: 'ReactORM' }));\n}\n\nexport const store = configureStore()","import { IActionType } from \"./interfaces\";\nimport { store } from \"./store/index\";\n\nexport function dispacthAction<T extends IActionType>(action: T) {\n  if (action as IActionType) {\n    store.dispatch(action);\n  }\n  return store.dispatch<{ type: string }>(action);\n}\n\nexport const isMobile = () =>\n  navigator.appVersion.toString().toLowerCase().includes(\"iphone\") ||\n  navigator.appVersion.toString().toLowerCase().includes(\"android\");\n\nexport const isIPad = () =>\n  navigator.appVersion.toString().toLowerCase().includes(\"ipad\");\n","import { BaseModel } from \"./BaseModel\";\ninterface IProductModelProps {\n  name: string;\n  images: {\n    url: string;\n  }[];\n  price: {\n    currencyIso: string;\n    value: string;\n  };\n  isFavorite: boolean;\n}\n\nexport class ProductModel extends BaseModel<IProductModelProps> {\n  constructor(props: any) {\n    super(props);\n    this.props = props;\n  }\n  static resource = \"product\";\n}\n","import * as R from \"ramda\";\nimport {\n  saveAllInstances,\n  saveInstance,\n  deleteInstance\n} from \"../actions/modelActions\";\nimport { store } from \"../store/index\";\n\n/**\n * This is the Base Class for all the models which will be created for each resources.\n * Consist of the Utility methods which Saves/Updates/Deletes the data from the Store.\n * The Derived class need to pass a Generic Class <P> i.e. prop types for the Model being Created.\n * @export\n * @class BaseModel\n * @template P\n */\nexport class BaseModel<P> {\n  static resource: string;\n  resource: string;\n  id: string;\n\n  constructor(public props: P & { id: string; _id: string }) {\n    this.props = props;\n    this.id = props.id;\n    this.resource = (this.constructor as typeof BaseModel).resource;\n  }\n\n  /**\n   * Returns the key i.e. the concatination of the ID of current instance with the resource name.\n   * @memberof BaseModel\n   */\n  getStoreKey = (id: string): string => `${this.resource}${id}`;\n\n  /**\n   * Returns the key i.e. the concatination of the ID of current instance with the resource name.\n   * It is static so that the static method inside this class should have access to the same.\n   * @static\n   * @memberof BaseModel\n   */\n  static getStoreKey = (id: string, instance: any): string =>\n    `${instance.resource}${id}`;\n\n  /**\n   * Saves an instance of the current class to the Store, the key is the resourceName+ID of the data.\n   * Accepts both @props id and _id(Support for MONGO)\n   * @returns {BaseModel<P>}\n   * @memberof BaseModel\n   */\n  $save(): BaseModel<P> {\n    saveInstance(\n      this.resource,\n      this.getStoreKey(this.props.id || this.props._id),\n      this\n    );\n    return this;\n  }\n\n  /**\n   * Saves an array of instances to the Store, the instance map is getting created over here and is being saved to the store.\n   * @returns {BaseModel<P>[]}\n   * @memberof BaseModel\n   */\n  $saveAll(): BaseModel<P>[] {\n    let instanceObject: any = {};\n    R.map(x => {\n      return (instanceObject[this.getStoreKey(x.id)] = {\n        props: x,\n        resource: this.resource\n      });\n    }, this.props as any);\n    saveAllInstances(this.resource, instanceObject);\n    return [this];\n  }\n\n  /**\n   * Returns the instance which matches the ID passed in the parameter of this function.\n   * The return value contains props.\n   * @static\n   * @param {string} id\n   * @param {*} [state=store.getState()]\n   * @returns\n   * @memberof BaseModel\n   */\n  static get(id: string, state = store.getState()) {\n    return state.model.get(this.getStoreKey(id, this));\n  }\n\n  /**\n   * Returns the list of all the instances of the current class.\n   * It uses resource name to match the instance to the current instance and then returns the filtered value.\n   * @static\n   * @param {*} [state=store.getState()]\n   * @returns\n   * @memberof BaseModel\n   */\n  static list(state = store.getState()) {\n    return R.values(\n      state.model\n        .filter((x: { resource: string; props: any }) =>\n          x.resource === this.resource ? x.props : \"\"\n        )\n        .toJS()\n    );\n  }\n\n  /**\n   * Deletes an instances matching the ID passed in the parameter.\n   * @static\n   * @param {BaseModel<any>} instance\n   * @returns\n   * @memberof BaseModel\n   */\n  static delete(instance: BaseModel<any>) {\n    deleteInstance(\n      this.getStoreKey(instance.props.id || instance.props._id, instance)\n    );\n    return this;\n  }\n}\n","import { dispacthAction } from \"../generalUtils\";\nimport {\n  SAVE_INSTANCE,\n  DELETE_INSTANCE,\n  DELETE_ALL_INSTANCE,\n  SAVE_ALL_INSTANCE\n} from \"../constants/actionTypes\";\nimport { BaseModel } from \"../models/BaseModel\";\n\n/**\n * Usage: To save the instance to the Store, called in the BaseModel.\n * @param {string} identifier\n * @param {string} id\n * @param {BaseModel<{}>} instance\n */\nexport const saveInstance = (\n  identifier: string,\n  id: string,\n  instance: BaseModel<{}>\n) =>\n  dispacthAction({\n    type: `${identifier}/${SAVE_INSTANCE}`,\n    id,\n    instance\n  });\n\n/**\n * Usage: Saves all the instances to the store, accepts the instance map and merges it into the Store state.\n * @param {string} identifier\n * @param {BaseModel<{}>[]} instances\n */\nexport const saveAllInstances = (\n  identifier: string,\n  instances: BaseModel<{}>[]\n) =>\n  dispacthAction({\n    type: `${identifier}/${SAVE_ALL_INSTANCE}`,\n    instances\n  });\n\n/**\n * Usage: Deletes an instance of the BaseModel from the Store.\n * @param {string} key\n */\nexport const deleteInstance = (key: string) =>\n  dispacthAction({\n    type: DELETE_INSTANCE,\n    key\n  });\n\n/**\n * Usage: To delete all the instances from the store.\n * @param {string[]} keys\n */\nexport const deleteAllInstance = (keys: string[]) =>\n  dispacthAction({\n    type: DELETE_ALL_INSTANCE,\n    keys\n  });\n","module.exports = __webpack_public_path__ + \"static/media/fabLogo.cfcdb977.png\";"],"sourceRoot":""}