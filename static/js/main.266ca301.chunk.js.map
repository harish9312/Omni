{"version":3,"sources":["components/CurrencySwitch/index.tsx","components/AccountPage/SignUpPage.tsx","components/AccountPage/Login.tsx","components/Navbar/index.tsx","components/BasePage/index.tsx","components/ProductDetails/StoreSelectionModal.tsx","components/ProductDetails/index.tsx","Routes.tsx","App.tsx","serviceWorker.ts","index.tsx","constants/actionTypes.ts","reducers/index.ts","reducers/modelReducer.ts","store/index.ts","generalUtils.ts","components/Navbar/fabLogo.png","models/ProductModel.ts","models/BaseModel.ts","actions/modelActions.ts"],"names":["CurrencySwitch","React","isOpen","setOpen","className","name","activeFlag","setActiveFlag","value","data-country","data-currency-symbol","data-display","onClick","tabIndex","id","data-value","SignUpPage","Row","Modal","toggle","ModalBody","Col","xs","md","lg","placeholder","Login","tree","navConfig","items","map","item","key","label","displayName","nodes","childCategoriesMain","i","Navbar","useState","setIsOpen","isOpenBurger","setIsOpenBurger","activeItem","setActiveItem","isLogin","isOpenLogin","isSignUp","isOpenSignUp","color","light","fixed","expand","NavbarBrand","aria-hidden","href","width","src","Logo","alt","data","hasSearch","NavbarToggler","Collapse","navbar","Nav","NavItem","itemData","index","onMouseEnter","repositoryId","onMouseLeave","BasePageImpl","this","props","children","BasePage","connect","StoreSelectionModal","setModalOpen","storeData","length","store","storeManager","phoneNo","storeName","operationalDays","operationalTime","ProductDetailsImpl","state","codeErrorStore","availableError","isDeliverable","codeErrorDel","storeError","storeDetails","storePinCode","productDetails","code","sizeScaleProductType","whitePrice","price","images","url","description","onCheckStore","a","isNaN","Number","setState","Axios","get","status","result","checkAvailability","message","cod","furniture","prepaid","match","params","productData","ProductModel","history","push","productCode","split","headers","useQueryString","response","product","onChange","e","target","style","ProductDetails","withRouter","ownProps","Home","lazy","then","default","SideCarousel","ProductList","WrappedComponent","Component","Routes","HashRouter","Suspense","fallback","Switch","Fragment","Route","exact","path","component","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","SAVE_INSTANCE","SAVE_ALL_INSTANCE","UPDATE_INSTANCE","DELETE_INSTANCE","DELETE_ALL_INSTANCE","rootReducer","combineReducers","model","OrderedMap","action","type","instances","instance","modelId","set","merge","delete","deleteAll","createStore","devToolsEnhancer","dispacthAction","dispatch","isMobile","appVersion","toString","toLowerCase","includes","isIPad","module","exports","BaseModel","resource","getStoreKey","constructor","identifier","_id","instanceObject","R","x","getState","filter","toJS"],"mappings":"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","file":"static/js/main.266ca301.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./currencySwitch.scss\";\nexport const CurrencySwitch = () => {\n  const [isOpen, setOpen] = React.useState(false);\n  const [activeFlag, setActiveFlag] = React.useState({\n    className: \"flags-India\",\n    name: \"INR\",\n  });\n  return (\n    <div className=\"doubly-wrapper\">\n      <select className=\"currency-switcher right\" name=\"doubly-currencies\">\n        <option\n          value=\"INR\"\n          data-country=\"India\"\n          data-currency-symbol=\"₹\"\n          data-display=\"INR\"\n        >\n          Indian Rupee\n        </option>\n        <option\n          value=\"USD\"\n          data-country=\"United-States\"\n          data-currency-symbol=\"$\"\n          data-display=\"USD\"\n        >\n          US Dollar\n        </option>\n      </select>\n      <div\n        className={`nice-select currency-switcher right slim ${\n          isOpen && \"open\"\n        }`}\n        onClick={() => setOpen(!isOpen)}\n        tabIndex={0}\n        id=\"switcher\"\n      >\n        <span className=\"current notranslate\">\n          <span className={`flags ${activeFlag.className}`}></span> &nbsp;\n          {activeFlag.name}\n        </span>\n        <ul className=\"list\">\n          <li\n            className=\"option notranslate selected\"\n            data-value=\"INR\"\n            data-country=\"India\"\n            data-currency-symbol=\"₹\"\n            data-display=\"INR\"\n            onClick={() =>\n              setActiveFlag({ className: \"flags-India\", name: \"INR\" })\n            }\n          >\n            <span className=\"flags flags-India\"></span> &nbsp;INR\n          </li>\n          <li\n            className=\"option notranslate \"\n            data-value=\"USD\"\n            data-country=\"United-States\"\n            data-currency-symbol=\"$\"\n            data-display=\"USD\"\n            onClick={() =>\n              setActiveFlag({ className: \"flags-United-States\", name: \"USD\" })\n            }\n          >\n            <span className=\"flags flags-United-States\"></span> &nbsp;USD\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Modal, ModalBody, Row, Col } from \"reactstrap\";\nimport \"./styles.scss\";\nexport interface ILoginProps {}\n\nexport const SignUpPage = () => {\n  const [isOpen, setOpen] = React.useState(true);\n\n  return (\n    <Row>\n      <Modal\n        isOpen={isOpen}\n        toggle={() => setOpen(!isOpen)}\n        className=\"LoginModal\"\n      >\n        <ModalBody>\n          <div className=\"FormContainer\">\n            <div className=\"SignInText\">Sign Up</div>\n            <Col xs={12} md={12} lg={12}>\n              <div className=\"InputContainer\">\n                <span>First Name * </span>\n                <input className=\"FormInput\" />\n              </div>\n            </Col>\n            <Col xs={12} md={12} lg={12}>\n              <div className=\"InputContainer\">\n                <span>Last Name * </span>\n                <input\n                  className=\"FormInput\"\n                />\n              </div>{\" \"}\n            </Col>\n            <Col xs={12} md={12} lg={12}>\n              <div className=\"InputContainer\">\n                <span>Mobile Number * </span>\n                <input\n                  className=\"FormInput\"\n                />\n              </div>{\" \"}\n            </Col>\n            <Col xs={12} md={12} lg={12}>\n              <div className=\"InputContainer\">\n                <span>Email Address * </span>\n                <input\n                  className=\"FormInput\"\n                />\n              </div>{\" \"}\n            </Col>\n            <Col xs={12} md={12} lg={12}>\n              <div className=\"InputContainer\">\n                <span>Referral Code: </span>\n                <input\n                  className=\"FormInput\"\n                />\n              </div>{\" \"}\n            </Col>\n            <Col xs={12} md={12} lg={12}>\n              <div className=\"InputContainer\">\n                <span>Password * </span>\n                <input\n                  placeholder=\"Minimum 8 characters\"\n                  className=\"FormInput\"\n                />\n              </div>{\" \"}\n            </Col>\n            <Col xs={12} md={12} lg={12}>\n              <div className=\"InputContainer\">\n                <span>Confirm Your Password * </span>\n                <input\n                  placeholder=\"Minimum 8 characters\"\n                  className=\"FormInput\"\n                />\n              </div>{\" \"}\n            </Col>\n            <div className=\"FormFooter\">\n              <div className=\"SignInButton\">\n                <button className=\"Button\">Submit</button>\n              </div>\n              <div className=\"SingUpText\">\n                <span>\n                  By creating an account, you agree to Fabindia`s &nbsp;\n                  <span className=\"TextRed\">term of use and privacy</span>\n                </span>\n              </div>\n            </div>\n            <div className=\"AlreadyHave\">\n              <div className=\"NormalText\"> Already Have An Account?</div>\n              <button className=\"SimpleBorder\">Sign In</button>\n            </div>\n          </div>\n        </ModalBody>\n      </Modal>\n    </Row>\n  );\n};\n","import * as React from \"react\";\nimport { Modal, ModalBody, Row, Col } from \"reactstrap\";\nimport \"./styles.scss\";\nexport interface ILoginProps {}\n\nexport const Login = () => {\n  const [isOpen, setOpen] = React.useState(true);\n\n  return (\n    <Row>\n      <Modal\n        isOpen={isOpen}\n        toggle={() => setOpen(!isOpen)}\n        className=\"LoginModal\"\n      >\n        <ModalBody>\n          <div className=\"FormContainer\">\n            <div className=\"SignInText\">Sign In</div>\n            <Col xs={12} md={12} lg={12}>\n              <div className=\"InputContainer\">\n                <span>Email Address * </span>\n                <input className=\"FormInput\" />\n              </div>\n            </Col>\n            <Col xs={12} md={12} lg={12}>\n              <div className=\"InputContainer\">\n                <span>Password * </span>\n                <input\n                  placeholder=\"Minimum 8 characters\"\n                  className=\"FormInput\"\n                />\n              </div>{\" \"}\n            </Col>\n            <div className=\"FormFooter\">\n              <div className=\"SignInButton\">\n                <button className=\"Button\">Sign In</button>\n              </div>\n              <div className=\"BottomTextContainer\">\n                <span className=\"TextRed\">Forgot Password?</span>\n                <span>\n                  New to Omin? &nbsp;\n                  <span className=\"TextRed\">Create Account</span>\n                </span>\n              </div>\n            </div>\n          </div>\n        </ModalBody>\n      </Modal>\n    </Row>\n  );\n};\n","import React, { useState } from \"react\";\nimport TreeMenu from \"react-simple-tree-menu\";\nimport {\n  Collapse,\n  Nav,\n  Navbar as RNav,\n  NavbarBrand,\n  NavbarToggler,\n  NavItem,\n} from \"reactstrap\";\nimport { CurrencySwitch } from \"../CurrencySwitch\";\nimport Logo from \"./fabLogo.png\";\nimport \"./navbar.scss\";\nimport navConfig from \"./config.json\";\nimport { SignUpPage } from \"../AccountPage/SignUpPage\";\nimport { Login } from \"../AccountPage/Login\";\n\nconst treeData = [\n  {\n    key: \"first-level-node-1\",\n    label: \"Node 1 at the first level\",\n    nodes: [\n      {\n        key: \"second-level-node-1\",\n        label: \"Node 1 at the second level\",\n        nodes: [\n          {\n            key: \"third-level-node-1\",\n            label: \"Last node of the branch\",\n            nodes: [], // you can remove the nodes property or leave it as an empty array\n          },\n        ],\n      },\n    ],\n  },\n  {\n    key: \"first-level-node-2\",\n    label: \"Node 2 at the first level\",\n  },\n];\n\nconst tree = navConfig.items.map((item) => {\n  const obj = {\n    key: item.id,\n    label: item.displayName,\n    nodes: (item.childCategoriesMain as any).map((i: any) => {\n      return { label: i.displayName, key: i.id, nodes: [] };\n    }),\n  };\n  return obj;\n});\n\nexport const Navbar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenBurger, setIsOpenBurger] = useState(false);\n  const [activeItem, setActiveItem] = useState(\"\");\n  const [isLogin, isOpenLogin] = useState(false);\n  const [isSignUp, isOpenSignUp] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n  return (\n    <RNav color=\"light\" light fixed=\"top\" expand=\"md\">\n      {isLogin && <Login />}\n      {isSignUp && <SignUpPage />}\n      <NavbarBrand>\n        <i\n          className=\"fa fa-bars hidden-lg\"\n          aria-hidden=\"true\"\n          onClick={() => setIsOpenBurger(true)}\n        >\n          {\" \"}\n        </i>\n        <a href=\"/\">\n          {\" \"}\n          <img\n            className=\"LogoOnHamburger\"\n            width=\"120px\"\n            src={Logo}\n            alt=\"Logo\"\n          />\n        </a>\n      </NavbarBrand>\n      <div\n        className={`HambburgerSideMenu ${\n          isOpenBurger ? \"HM-open\" : \"HM-close\"\n        }`}\n      >\n        <div className=\"MainLogo\">\n          {\" \"}\n          <a href=\"/\">\n            {\" \"}\n            <img\n              className=\"LogoOnHamburger\"\n              width=\"120px\"\n              src={Logo}\n              alt=\"Logo\"\n            />\n          </a>\n        </div>{\" \"}\n        <div className=\"AuthButtons\" >\n          <div onClick={() => isOpenLogin(true)}>Login</div>\n          &nbsp;&nbsp;\n          <div onClick={() => isOpenSignUp(true)}>SignUp</div>\n        </div>\n        <div className=\"TreeNode hidden-lg\">\n          <TreeMenu data={tree as any} hasSearch={false} />\n        </div>{\" \"}\n        <i\n          onClick={() => setIsOpenBurger(false)}\n          className=\"fa fa-times\"\n          aria-hidden=\"true\"\n        ></i>\n      </div>\n      <NavbarToggler onClick={toggle} />\n      <div className=\"MyNavContainer\">\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <div className=\"SearchInp\">\n                {\" \"}\n                <input\n                  className=\"SearchInput\"\n                  placeholder=\"Enter your search text here...\"\n                />\n                <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\n              </div>\n            </NavItem>\n          </Nav>\n          <div onClick={() => isOpenLogin(true)}>Login</div>\n          &nbsp;&nbsp;\n          <div onClick={() => isOpenSignUp(true)}>SignUp</div>\n          <CurrencySwitch />\n          {/* <NavbarText>\n            Sign In | Sign Up | Track Your Order | Store Locator\n          </NavbarText> */}\n        </Collapse>\n\n        <div className=\"MenuItemContainer hidden-xs \">\n          {navConfig.items.map((itemData, index) => {\n            return (\n              <>\n                <div\n                  onMouseEnter={() => setActiveItem(itemData.repositoryId)}\n                  className=\"NavItem\"\n                  key={index}\n                >\n                  {itemData.displayName}\n                  <i className=\"fa fa-chevron-down\"></i>\n                  {activeItem === itemData.repositoryId && (\n                    <div\n                      onMouseLeave={() => setActiveItem(\"\")}\n                      className=\"HoverElement\"\n                    >\n                      <h1>Items Goes Here for {itemData.displayName}</h1>\n                    </div>\n                  )}\n                </div>\n              </>\n            );\n          })}\n        </div>\n      </div>\n    </RNav>\n  );\n};\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Navbar } from \"../Navbar\";\n\nexport interface IBasePageProps {}\n\nexport class BasePageImpl extends React.PureComponent<IBasePageProps, {}> {\n  render() {\n    return (\n      <div className=\"BasePage\">\n        <Navbar />\n        {this.props.children}\n        {/* <Footer /> */}\n      </div>\n    );\n  }\n}\nexport function mapStateToProps() {\n  return {};\n}\nexport const BasePage = connect<{}, {}, IBasePageProps>(mapStateToProps)(\n  BasePageImpl\n);\n","import * as React from \"react\";\nimport { Modal, ModalBody } from \"reactstrap\";\n\nexport const StoreSelectionModal = (props: { storeData: any[] }) => {\n  const [isOpen, setModalOpen] = React.useState(false);\n  React.useEffect(() => setModalOpen(props.storeData.length > 0), [\n    props.storeData,\n  ]);\n\n  return (\n    <Modal\n      className=\"StoreModal\"\n      isOpen={isOpen}\n      toggle={() => setModalOpen(false)}\n    >\n      <ModalBody>\n        <div className=\"HeadText\">Hurray! We're now open.</div>\n        {props.storeData.map((store: any) => {\n          return (\n            <div className=\"StoreDetails\">\n              <div className=\"Manager\">{store.storeManager}</div>\n              <div className=\"Contact\">\n                {\" \"}\n                <span>Contact No. </span>\n                {store.phoneNo}\n              </div>\n              <h4>STORE NAME</h4>\n              <div className=\"StoreName\">{store.storeName}</div>\n              <h4>OPEN TIMIINGS</h4>\n              <div className=\"Timing\">\n                <span>Customer Entry on</span> {store.operationalDays} -{\" \"}\n                {store.operationalTime}\n              </div>\n            </div>\n          );\n        })}\n      </ModalBody>\n    </Modal>\n  );\n};\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport Axios from \"axios\";\nimport { ProductModel } from \"../../models/ProductModel\";\nimport { Row, Col } from \"reactstrap\";\nimport \"./productDetail.scss\";\nimport { IHistory } from \"../../interfaces\";\nimport { store } from \"../../store\";\nimport { StoreSelectionModal } from \"./StoreSelectionModal\";\nexport interface IProductDetailsProps {\n  match: {\n    params: {\n      id: string;\n    };\n  };\n  history: IHistory;\n}\n\nexport interface IStoreDetails {\n  operationalDays?: string;\n  operationalTime?: string;\n  phoneNo?: string;\n  servicablePinCode?: string;\n  storeAddress?: string;\n  storeCode?: string;\n  storeManager?: string;\n  storeName: string;\n}\n\nexport class ProductDetailsImpl extends React.Component<\n  IProductDetailsProps,\n  {\n    productDetails: any;\n    storePinCode: string;\n    storeError: boolean;\n    storeDetails: IStoreDetails[];\n    codeErrorStore: boolean;\n    availableError: boolean;\n    codeErrorDel: boolean;\n    isDeliverable: boolean;\n  }\n> {\n  state = {\n    codeErrorStore: false,\n    availableError: false,\n    isDeliverable: false,\n    codeErrorDel: false,\n    storeError: false,\n    storeDetails: [],\n    storePinCode: \"\",\n    productDetails: {\n      name: \"\",\n      code: \"\",\n      sizeScaleProductType: \"\",\n      whitePrice: {\n        price: \"\",\n        value: \"\",\n      },\n      images: [{ url: \"\" }],\n      description: \"\",\n    },\n  };\n\n  async componentDidMount() {\n    const id = this.props.match.params.id;\n    const productData = ProductModel.get(id);\n    if (!productData) {\n      this.props.history.push(\"/product-list\");\n      return;\n    }\n\n    const productCode = id.split(\"_\")[0] + id.split(\"_\")[2];\n    const response = await Axios.get(\n      `https://apidojo-hm-hennes-mauritz-v1.p.rapidapi.com/products/detail?country=us&lang=en&productcode=${productCode}`,\n      {\n        headers: {\n          \"x-rapidapi-host\": \"apidojo-hm-hennes-mauritz-v1.p.rapidapi.com\",\n          \"x-rapidapi-key\":\n            \"516a5ecdcemsh2b5192fad8db3b0p12badbjsn10762fa93820\",\n          useQueryString: true,\n        },\n      }\n    );\n    this.setState({\n      productDetails: { ...response.data.product, ...productData?.props },\n    });\n  }\n\n  onCheckStore = async () => {\n    if (isNaN(Number(this.state.storePinCode))) {\n      this.setState({\n        codeErrorStore: true,\n        storeError: false,\n      });\n      return;\n    }\n    const storeDetails = await Axios.get(\n      \"https://run.mocky.io/v3/a5693cf1-adf3-4086-96a0-05d35425cd4c\"\n      // `https://www.fabindia.com/ccstorex/custom/v1/fetchStoreDetails?identifier=${this.state.storePinCode}`\n    );\n    if (storeDetails.data.status === \"error\") {\n      this.setState({ storeError: true, codeErrorStore: false });\n      return;\n    }\n    if (storeDetails.data.result) {\n      this.setState({\n        storeDetails: storeDetails.data.result,\n        storeError: false,\n        codeErrorStore: false,\n      });\n    }\n  };\n\n  checkAvailability = async () => {\n    if (isNaN(Number(this.state.storePinCode))) {\n      this.setState({\n        codeErrorDel: true,\n        availableError: false,\n        isDeliverable: false,\n      });\n      return;\n    }\n    const storeDetails = await Axios.get(\n      'https://run.mocky.io/v3/b6cf8fb5-9f0d-4bbd-8633-1c6e8f4aa9fa'\n      // `https://www.fabindia.com/ccstorex/custom/v1/serviceabilityCheck?postalCode=${this.state.storePinCode}`\n    );\n    const { cod, furniture, prepaid } = storeDetails.data.message;\n    if (!cod && !furniture && !prepaid) {\n      this.setState({\n        availableError: true,\n        isDeliverable: false,\n        codeErrorDel: false,\n      });\n      return;\n    }\n    if (cod || furniture || prepaid) {\n      this.setState({\n        isDeliverable: true,\n        availableError: false,\n        codeErrorDel: false,\n      });\n    }\n  };\n\n  render() {\n    if (!this.state.productDetails) {\n      return \"\";\n    }\n    const { productDetails } = this.state;\n    return (\n      <div className=\"ProductDetails\">\n        <StoreSelectionModal storeData={this.state.storeDetails} />\n        <Row>\n          <Col xs={12} md={12} lg={6}>\n            <div className=\"ProductImage\">\n              <img alt=\"\" src={productDetails.images[0].url} />\n            </div>\n          </Col>\n          <Col xs={12} md={12} lg={6} className=\"Details\">\n            <div className=\"ProductRow ProductName padding-20\">\n              {productDetails.name}\n            </div>\n            <div className=\"ProductRow ProductCode\">\n              Code: &nbsp; {productDetails.code}\n            </div>\n            <div className=\"padding-20\">\n              <div className=\"ProductRow ProductPrice\">\n                $\n                {productDetails.whitePrice.price ||\n                  productDetails.whitePrice.value}\n              </div>\n              <div>\n                {\" \"}\n                <div className=\"Quantity\">\n                  <i className=\"fa qty fa-plus\" />\n                  <span className=\"qty\">10</span>\n                  <i className=\"fa qty fa-minus\" />\n                </div>\n                <div>\n                  <button className=\"add\">ADD TO CART</button>\n                </div>\n              </div>\n            </div>\n            <div className=\"padding-20\">\n              <div className=\"head\">Check Delivery Service Availability</div>\n              <div className=\"detail-data pro-details\">\n                {\" \"}\n                <div>Check Delivery Service Availability</div>\n                <input\n                  onChange={(e) =>\n                    this.setState({ storePinCode: e.target.value })\n                  }\n                  className=\"input\"\n                  placeholder=\"Enter Pincode\"\n                />\n                <button onClick={this.checkAvailability} className=\"check\">\n                  Check\n                </button>\n              </div>\n              {this.state.isDeliverable && (\n                <span style={{ color: \"green\" }}>Service is available</span>\n              )}\n              {this.state.availableError && (\n                <span style={{ color: \"red\" }}>\n                  This item cannot be delivered at the provided pincode.\n                </span>\n              )}\n              {this.state.codeErrorDel && (\n                <span style={{ color: \"red\" }}>\n                  Please enter a valid pincode\n                </span>\n              )}\n            </div>\n            <div className=\"padding-20\">\n              <div className=\"head\">Connect To A Store</div>\n              <div className=\"detail-data pro-details\">\n                <input\n                  className=\"input\"\n                  onChange={(e) =>\n                    this.setState({ storePinCode: e.target.value })\n                  }\n                  placeholder=\"Enter a Pincode or Store Name\"\n                />{\" \"}\n                <button onClick={this.onCheckStore} className=\"add\">\n                  Connect To A Store\n                </button>\n              </div>\n              {this.state.storeError && (\n                <span style={{ color: \"red\" }}>\n                  This item cannot be delivered at the provided pincode.\n                </span>\n              )}\n              {this.state.codeErrorStore && (\n                <span style={{ color: \"red\" }}>\n                  Please enter a valid pincode\n                </span>\n              )}\n            </div>\n            <div className=\"ProductRow padding-20 ProductDesc\">\n              <div className=\"head\">Details</div>\n              <div className=\"pro-details\">{productDetails.description}</div>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\nexport function mapStateToProps(state: any, ownProps: any) {\n  return {\n    state,\n  };\n}\nexport const ProductDetails = withRouter(\n  connect<{}, {}, IProductDetailsProps>(mapStateToProps)(ProductDetailsImpl)\n);\n","import { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\nimport React from \"react\";\nimport { BasePage } from \"./components/BasePage\";\nimport { ProductDetails } from \"./components/ProductDetails\";\n\nconst Home = React.lazy(() =>\n  import(\"./components/Home\").then(({ Home }) => ({\n    default: Home,\n  }))\n);\nconst SideCarousel = React.lazy(() =>\n  import(\"./components/docs\").then(({ SideCarousel }) => ({\n    default: SideCarousel,\n  }))\n);\nconst ProductList = React.lazy(() =>\n  import(\"./components/ProductList\").then(({ ProductList }) => ({\n    default: ProductList,\n  }))\n);\n\nconst WrappedComponent = (Component: any) => {\n  return class Wrapper extends React.Component {\n    render() {\n      return (\n        <BasePage>\n          <Component />\n        </BasePage>\n      );\n    }\n  };\n};\n\n// const NotFound = () => <h1>404 Not Found</h1>;\n\nexport const Routes = () => {\n  return (\n    <HashRouter>\n      <React.Suspense fallback={<h1>Loading...</h1>}>\n        <Switch>\n          <React.Fragment>\n            <Route exact path=\"/\" component={WrappedComponent(Home)} />\n            <Route\n              exact\n              path=\"/lib/docs\"\n              component={WrappedComponent(SideCarousel)}\n            />\n            <Route\n              exact\n              path=\"/product-list\"\n              component={WrappedComponent(ProductList)}\n            />\n            <Route\n              exact\n              path=\"/product-detail/:id\"\n              component={WrappedComponent(ProductDetails)}\n            />\n          </React.Fragment>\n        </Switch>\n      </React.Suspense>\n    </HashRouter>\n  );\n};\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/index\";\nimport { Routes } from \"./Routes\";\nimport \"antd/dist/antd.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport \"./main.scss\";\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","export const SAVE_INSTANCE = 'SAVE_INSTANCE';\nexport const SAVE_ALL_INSTANCE = 'SAVE_ALL_INSTANCE';\nexport const UPDATE_INSTANCE = 'UPDATE_INSTANCE';\nexport const DELETE_INSTANCE = 'DELETE_INSTANCE';\nexport const DELETE_ALL_INSTANCE = 'DELETE_ALL_INSTANCE';\n","import { combineReducers } from \"redux\";\nimport { modelReducer } from './modelReducer';\n\nexport const rootReducer = combineReducers({\n    model: modelReducer\n})","import { OrderedMap } from \"immutable\";\nimport {\n  DELETE_ALL_INSTANCE,\n  DELETE_INSTANCE,\n  SAVE_ALL_INSTANCE,\n  SAVE_INSTANCE,\n  UPDATE_INSTANCE\n} from \"../constants/actionTypes\";\nimport { IActionType } from \"../interfaces\";\n\n/**\n * Usage: This the logic container to save the BaseModel instance to the store.\n * @param {*} [state=OrderedMap({})]\n * @param {IActionType} action\n * @returns\n */\nexport const modelReducer = (state = OrderedMap({}), action: IActionType) => {\n  const { type, instances, instance, id } = action;\n  const modelId = id as string;\n  switch (type.split(\"/\")[1]) {\n    case SAVE_INSTANCE:\n      return state.set(modelId, instance);\n    case SAVE_ALL_INSTANCE:\n      return state.merge(instances);\n    case UPDATE_INSTANCE:\n      return state.set(modelId, instance);\n    case DELETE_INSTANCE:\n      return state.delete(modelId);\n    case DELETE_ALL_INSTANCE:\n      return state.deleteAll(modelId);\n    default:\n      return state;\n  }\n};\n","import { createStore, Store } from \"redux\";\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport { IReduxStore } from '../interfaces';\nimport { rootReducer } from '../reducers/index';\n\nfunction configureStore(): Store<IReduxStore> {\n    return createStore(rootReducer, devToolsEnhancer({ name: 'ReactORM' }));\n}\n\nexport const store = configureStore()","import { IActionType } from \"./interfaces\";\nimport { store } from \"./store/index\";\n\nexport function dispacthAction<T extends IActionType>(action: T) {\n  if (action as IActionType) {\n    store.dispatch(action);\n  }\n  return store.dispatch<{ type: string }>(action);\n}\n\nexport const isMobile = () =>\n  navigator.appVersion.toString().toLowerCase().includes(\"iphone\") ||\n  navigator.appVersion.toString().toLowerCase().includes(\"android\");\n\nexport const isIPad = () =>\n  navigator.appVersion.toString().toLowerCase().includes(\"ipad\");\n","module.exports = __webpack_public_path__ + \"static/media/fabLogo.cfcdb977.png\";","import { BaseModel } from \"./BaseModel\";\ninterface IProductModelProps {\n  name: string;\n  images: {\n    url: string;\n  }[];\n  price: {\n    currencyIso: string;\n    value: string;\n  };\n  isFavorite: boolean;\n}\n\nexport class ProductModel extends BaseModel<IProductModelProps> {\n  constructor(props: any) {\n    super(props);\n    this.props = props;\n  }\n  static resource = \"product\";\n}\n","import * as R from \"ramda\";\nimport {\n  saveAllInstances,\n  saveInstance,\n  deleteInstance\n} from \"../actions/modelActions\";\nimport { store } from \"../store/index\";\n\n/**\n * This is the Base Class for all the models which will be created for each resources.\n * Consist of the Utility methods which Saves/Updates/Deletes the data from the Store.\n * The Derived class need to pass a Generic Class <P> i.e. prop types for the Model being Created.\n * @export\n * @class BaseModel\n * @template P\n */\nexport class BaseModel<P> {\n  static resource: string;\n  resource: string;\n  id: string;\n\n  constructor(public props: P & { id: string; _id: string }) {\n    this.props = props;\n    this.id = props.id;\n    this.resource = (this.constructor as typeof BaseModel).resource;\n  }\n\n  /**\n   * Returns the key i.e. the concatination of the ID of current instance with the resource name.\n   * @memberof BaseModel\n   */\n  getStoreKey = (id: string): string => `${this.resource}${id}`;\n\n  /**\n   * Returns the key i.e. the concatination of the ID of current instance with the resource name.\n   * It is static so that the static method inside this class should have access to the same.\n   * @static\n   * @memberof BaseModel\n   */\n  static getStoreKey = (id: string, instance: any): string =>\n    `${instance.resource}${id}`;\n\n  /**\n   * Saves an instance of the current class to the Store, the key is the resourceName+ID of the data.\n   * Accepts both @props id and _id(Support for MONGO)\n   * @returns {BaseModel<P>}\n   * @memberof BaseModel\n   */\n  $save(): BaseModel<P> {\n    saveInstance(\n      this.resource,\n      this.getStoreKey(this.props.id || this.props._id),\n      this\n    );\n    return this;\n  }\n\n  /**\n   * Saves an array of instances to the Store, the instance map is getting created over here and is being saved to the store.\n   * @returns {BaseModel<P>[]}\n   * @memberof BaseModel\n   */\n  $saveAll(): BaseModel<P>[] {\n    let instanceObject: any = {};\n    R.map(x => {\n      return (instanceObject[this.getStoreKey(x.id)] = {\n        props: x,\n        resource: this.resource\n      });\n    }, this.props as any);\n    saveAllInstances(this.resource, instanceObject);\n    return [this];\n  }\n\n  /**\n   * Returns the instance which matches the ID passed in the parameter of this function.\n   * The return value contains props.\n   * @static\n   * @param {string} id\n   * @param {*} [state=store.getState()]\n   * @returns\n   * @memberof BaseModel\n   */\n  static get(id: string, state = store.getState()) {\n    return state.model.get(this.getStoreKey(id, this));\n  }\n\n  /**\n   * Returns the list of all the instances of the current class.\n   * It uses resource name to match the instance to the current instance and then returns the filtered value.\n   * @static\n   * @param {*} [state=store.getState()]\n   * @returns\n   * @memberof BaseModel\n   */\n  static list(state = store.getState()) {\n    return R.values(\n      state.model\n        .filter((x: { resource: string; props: any }) =>\n          x.resource === this.resource ? x.props : \"\"\n        )\n        .toJS()\n    );\n  }\n\n  /**\n   * Deletes an instances matching the ID passed in the parameter.\n   * @static\n   * @param {BaseModel<any>} instance\n   * @returns\n   * @memberof BaseModel\n   */\n  static delete(instance: BaseModel<any>) {\n    deleteInstance(\n      this.getStoreKey(instance.props.id || instance.props._id, instance)\n    );\n    return this;\n  }\n}\n","import { dispacthAction } from \"../generalUtils\";\nimport {\n  SAVE_INSTANCE,\n  DELETE_INSTANCE,\n  DELETE_ALL_INSTANCE,\n  SAVE_ALL_INSTANCE\n} from \"../constants/actionTypes\";\nimport { BaseModel } from \"../models/BaseModel\";\n\n/**\n * Usage: To save the instance to the Store, called in the BaseModel.\n * @param {string} identifier\n * @param {string} id\n * @param {BaseModel<{}>} instance\n */\nexport const saveInstance = (\n  identifier: string,\n  id: string,\n  instance: BaseModel<{}>\n) =>\n  dispacthAction({\n    type: `${identifier}/${SAVE_INSTANCE}`,\n    id,\n    instance\n  });\n\n/**\n * Usage: Saves all the instances to the store, accepts the instance map and merges it into the Store state.\n * @param {string} identifier\n * @param {BaseModel<{}>[]} instances\n */\nexport const saveAllInstances = (\n  identifier: string,\n  instances: BaseModel<{}>[]\n) =>\n  dispacthAction({\n    type: `${identifier}/${SAVE_ALL_INSTANCE}`,\n    instances\n  });\n\n/**\n * Usage: Deletes an instance of the BaseModel from the Store.\n * @param {string} key\n */\nexport const deleteInstance = (key: string) =>\n  dispacthAction({\n    type: DELETE_INSTANCE,\n    key\n  });\n\n/**\n * Usage: To delete all the instances from the store.\n * @param {string[]} keys\n */\nexport const deleteAllInstance = (keys: string[]) =>\n  dispacthAction({\n    type: DELETE_ALL_INSTANCE,\n    keys\n  });\n"],"sourceRoot":""}